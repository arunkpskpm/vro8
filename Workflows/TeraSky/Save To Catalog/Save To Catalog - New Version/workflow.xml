<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:workflow xmlns:ns2="http://vmware.com/vco/workflow" root-name="item10" object-name="workflow:name=generic" id="7c67dbdd-817b-4401-a548-96246580407b" editor-version="2.0" version="2.0.0" api-version="6.0.0" allowed-operations="vef" restartMode="1" resumeFromFailedMode="0">
    <display-name>Save To Catalog - New Version</display-name>
    <description>Clone a deployment and configure a new version on the deployments source blueprint
Current Limitations:
1. only works for blueprints with single instances of a component (does not support the count field on a blueprint resource)
2. currently only supports Cloud.vSphere.Machine objects and no other VM types</description>
    <error-handler name="item21" throw-bind-name="errorMessage">
        <position y="149.23076923076923" x="243.07692307692332"/>
    </error-handler>
    <position y="10.0" x="50.0"/>
    <input>
        <param name="prefix" type="string">
            <description>the vm name prefix for building the new cloned VMs (templates) names</description>
        </param>
        <param name="existingDeploymentName" type="string">
            <description>The deployment Name that this automation will clone and turn into a blueprint ready for consumption</description>
        </param>
        <param name="newVersion" type="string">
            <description>The Unique name of the new blueprint version to be created</description>
        </param>
    </input>
    <output/>
    <attrib name="accessToken" type="string">
        <value encoded="n"></value>
        <description>VRA Bearer Token used in all needed API calls against the VRA API</description>
    </attrib>
    <attrib name="restHost" type="REST:RESTHost" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="vraRestHost">
        <description>the VRA Rest API Host object</description>
    </attrib>
    <attrib name="username" type="string" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="username">
        <description>the username of the VRA admin user</description>
    </attrib>
    <attrib name="password" type="SecureString" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="password">
        <description>the password of the VRA admin user</description>
    </attrib>
    <attrib name="deploymentID" type="string">
        <value encoded="n"></value>
        <description>the ID of the deployment being saved as a blueprint</description>
    </attrib>
    <attrib name="blueprintID" type="string">
        <value encoded="n"></value>
        <description>the blueprint ID the deployment was provisioned from</description>
    </attrib>
    <attrib name="blueprintVersion" type="string">
        <value encoded="n"></value>
        <description>the blueprint version the deployment was provisioned from</description>
    </attrib>
    <attrib name="blueprintYaml" type="Text">
        <value encoded="n"></value>
        <description>the source blueprints YAML</description>
    </attrib>
    <attrib name="blueprintJson" type="string">
        <value encoded="n"></value>
        <description>source blueprints JSON representation</description>
    </attrib>
    <attrib name="deploymentResourcesData" type="Array/Properties">
        <value encoded="n">[]</value>
        <description>used for storing the relevant data for cloned vms and here placement in the blueprints</description>
    </attrib>
    <attrib name="vmFolder" type="VC:VmFolder">
        <value encoded="n"/>
        <description>The VM Folder object created for the blueprint during the automation</description>
    </attrib>
    <attrib name="newBlueprintYaml" type="Text">
        <value encoded="n"></value>
        <description>the YAML of the new blueprint</description>
    </attrib>
    <attrib name="newBlueprintJson" type="string">
        <value encoded="n"></value>
        <description>the JSON representation of the new blueprint</description>
    </attrib>
    <attrib name="snapshotName" type="string">
        <value encoded="n">ss_for_vra_blueprint</value>
        <description>name of snashot for all new cloned vms to be used in vra blueprint to provision linked clones</description>
    </attrib>
    <attrib name="projectId" type="string">
        <value encoded="n"></value>
        <description>the ID of the project the deployment exists under and that the new blueprint will be created in its context</description>
    </attrib>
    <attrib name="parentVmFolder" type="VC:VmFolder">
        <value encoded="n"/>
        <description>the folder the blueprint versions are saved under</description>
    </attrib>
    <attrib name="errorMessage" type="string">
        <value encoded="n"/>
        <description>error message variable</description>
    </attrib>
    <attrib name="cloudAccountID" type="string">
        <value encoded="n"/>
        <description>the vCenter cloud account ID</description>
    </attrib>
    <attrib name="NsxtConfiguration" type="boolean" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="nsx-t-environemnt">
        <description>determines if ns-t networking is used in the environment</description>
    </attrib>
    <attrib name="linkedCloneConfiguration" type="boolean" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="configure-linked-clones">
        <description>determines if linked clones will be used or full clones in the created blueprint version</description>
    </attrib>
    <attrib name="blueprintName" type="string">
        <value encoded="n"/>
        <description>name of the blueprint a new version is being created for</description>
    </attrib>
    <attrib name="blueprintBaseFolder" type="VC:VmFolder" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="parentVmFolder">
        <description>the main folder all blueprint vm folder will be located under</description>
    </attrib>
    <attrib name="sourceProjectID" type="string">
        <value encoded="n"></value>
        <description>project id the blueprint was created under</description>
    </attrib>
    <workflow-item name="item2" out-name="item0" type="task" comparator="0">
        <display-name>Get Dep Data</display-name>
        <script encoded="false">System.log("Retrieving Data from the source deployment")

// prepare variables
deploymentResourcesData = [];
var count = 1;

// get deployment source Data
var uri = "/deployment/api/deployments/" + deploymentID;
var method = "GET";
var body = "{}";
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    throw "error retrieving the deployment data. status code " + response.statusCode;
}

var strResponseBody = response.contentAsString;
var jsonResponseBody = JSON.parse(strResponseBody);

// set source blueprint and project data output variables
blueprintVersion = jsonResponseBody.blueprintVersion;
blueprintID = jsonResponseBody.blueprintId;
projectId = jsonResponseBody.projectId;

// get deployment resources from deployment ID
var uri = "/deployment/api/deployments/" + deploymentID + "/resources";
var method = "GET";
var body = "{}";
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    throw "error retrieving the deployment resources data. status code " + response.statusCode;
}

var strResponseBody = response.contentAsString;
var jsonResponseBody = JSON.parse(strResponseBody);

// traverse array of resource to find the vSphere VM components
for each (var resource in jsonResponseBody.content)
{
	if(resource.type == "Cloud.vSphere.Machine")
	{
		// retrieve the cloud account iud for later use
        cloudAccountID = resource.properties.endpointId

        // build properties object to hold data to correlate the new VM, source VM and
        // resource data in order to clone the VMs and create the blueprint accordingly
        var vmData = new Properties();
        vmData.put("name",resource.name);
        vmData.put("type",resource.type);
        vmData.put("template",resource.properties.imageRef);
        vmData.put("vmName",resource.properties.resourceName);
        vmData.put("vmUuid",resource.properties.instanceUUID);
        
        // make sure the new VM name is unique as VRA requires names to be unique within
        // a cloud account (vCenter) for it to be used as a template
        var nameOK = false;
        while(nameOK == false)
        {
            System.debug("Checking if the name " + prefix + "-" + count + " is available");
            nameOK = checkNameAvailability(prefix,count);
            System.debug("availability of the name is: " + nameOK);
            
            // if the name is not available raise the count variable and keep trying
            if(nameOK == false)
            {
                count++;
            }
        }
        vmData.put("tempName",prefix + "-" + count);
        
        // add the properties object to the output array with the data on all VMs relevant
        deploymentResourcesData.push(vmData);
		count++;
	}
}

System.log("All relevant data has been retrieved from the source deployment.");

// a function to check if a name is unique within all connected vCenters
function checkNameAvailability(prefix, number) {
  var tempName = prefix + "-" + number;
  
  // this is the quickest way as xpath query has not been optimized since VRO 7.1
  var vms = VcPlugin.getAllVirtualMachines(null, tempName);
  if(vms.length == 0)
  {
      return true;
  }  
  else
  {
      for each(vm in vms)
      {
          if(vm.name == tempName)
          {
              return false;
          }
      }
      return true;
  }
}</script>
        <in-binding>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="prefix" type="string" export-name="prefix"/>
            <bind name="accessToken" type="string" export-name="accessToken"/>
            <bind name="deploymentID" type="string" export-name="deploymentID"/>
        </in-binding>
        <out-binding>
            <bind name="blueprintID" type="string" export-name="blueprintID"/>
            <bind name="blueprintVersion" type="string" export-name="blueprintVersion"/>
            <bind name="projectId" type="string" export-name="projectId"/>
            <bind name="deploymentResourcesData" type="Array/Properties" export-name="deploymentResourcesData"/>
            <bind name="cloudAccountID" type="string" export-name="cloudAccountID"/>
        </out-binding>
        <position y="21.578947368421055" x="403.15789473684214"/>
    </workflow-item>
    <workflow-item name="item4" type="end" end-mode="0" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="272.3076923076923" x="41.53846153846153"/>
    </workflow-item>
    <workflow-item name="item0" out-name="item12" type="task" comparator="0">
        <display-name>Get BP YAML</display-name>
        <script encoded="false">System.log("Retrieving the Source Blueprint")

// retrieving the blueprint and its relevant version 
// that the source deployment was provisioned from
var uri = "/blueprint/api/blueprints/" + blueprintID + "/versions/" + blueprintVersion;
var method = "GET";
var body = "{}";
uri = encodeURI(uri)
var request = restHost.createRequest(method , uri , body)
request.setHeader("Authorization" , "Bearer " + accessToken)
request.setHeader("Content-Type" , "application/json")
var response = request.execute()

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    throw "error retrieving the source blueprint and its relevant version. status code " + response.statusCode;
}

var jsonResponseBody = JSON.parse(response.contentAsString);

// the API response is a JSON with an embedded YAML of the blueprint which is escaped.
// in order to be able to convert the YAML to JSON we must un-escape the YAML
yamlString = jsonResponseBody.content;
blueprintYaml = System.getModule("com.terasky.utils").replaceBackslashNWithNewLine(yamlString);
blueprintName = jsonResponseBody.name;
System.log("The Source Blueprint YAML has been retrieved and formatted")
System.log("Converting the blueprint YAML now to JSON to enable data manipulation")</script>
        <in-binding>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="blueprintID" type="string" export-name="blueprintID"/>
            <bind name="blueprintVersion" type="string" export-name="blueprintVersion"/>
            <bind name="accessToken" type="string" export-name="accessToken"/>
        </in-binding>
        <out-binding>
            <bind name="blueprintYaml" type="Text" export-name="blueprintYaml"/>
            <bind name="blueprintName" type="string" export-name="blueprintName"/>
        </out-binding>
        <position y="20.769230769230766" x="524.6153846153846"/>
    </workflow-item>
    <workflow-item name="item8" out-name="item18" type="task" comparator="0">
        <display-name>Update BP YAML In CA</display-name>
        <script encoded="false">System.log("New Blueprint JSON has been converted to YAML");
System.log("Creating the new blueprint now in the VRA");

// escaping the YAML so that it can be sent in the POST body JSON to VRA
var blueprintContent = System.getModule("com.terasky.utils").replaceNewLineWithBackslashN(newBlueprintYaml);

var uri = "/blueprint/api/blueprints/" + blueprintID;
var method = "GET";
var body = "{}";
uri = encodeURI(uri)
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2");
{
    throw "error retrieving the source blueprint and its relevant version. status code " + response.statusCode;
}

var jsonResponseBody = JSON.parse(response.contentAsString);
var name = jsonResponseBody.name;
var description = jsonResponseBody.description;
sourceProjectID = jsonResponseBody.projectId;
var requestScopeOrg = jsonResponseBody.requestScopeOrg;

// Creating the new blueprint version in the VRA
var uri = "/blueprint/api/blueprints/" + blueprintID;
var method = "PUT";
var body = '{"name":"' + name + '","description":"' + description + '","content":\"' + blueprintContent + '\","projectId":"' + sourceProjectID + '","requestScopeOrg":"' + requestScopeOrg + '"}';
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    System.warn("CONTNET: " + response.contentAsString);
    System.warn("STATUS CODE: " + response.statusCode);
    System.warn("HEADERS:");
    for each(var header in response.getAllHeaders().keys)
    {
        System.warn("    Header: " + header);
        System.warn("    Value:" + response.getAllHeaders().get(header));
    }
    throw "error submitting the new blueprint content. status code " + response.statusCode;
}</script>
        <in-binding>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="newBlueprintName" type="string" export-name="newVersion"/>
            <bind name="accessToken" type="string" export-name="accessToken"/>
            <bind name="blueprintID" type="string" export-name="blueprintID"/>
            <bind name="newBlueprintYaml" type="Text" export-name="newBlueprintYaml"/>
        </in-binding>
        <out-binding>
            <bind name="sourceProjectID" type="string" export-name="sourceProjectID"/>
        </out-binding>
        <position y="280.0" x="520.0"/>
    </workflow-item>
    <workflow-item name="item9" out-name="item16" type="task" comparator="0">
        <display-name>Update Blueprint JSON</display-name>
        <script encoded="false">System.log("Cloning and preparing the VMs is complete");
System.log("Updating the source blueprints JSON with the new VMs references");

// convert the JSON string to an object for easy manipulation
var blueprintJsonObject = JSON.parse(blueprintJson);

// traverse the array of properties created at the start of the workflow with VM details
for each(var component in deploymentResourcesData)
{
    var componentName = component.get("name");
    var newTemplateName = component.get("tempName");
    
    // if this is supposed to create a linked clone configuration we add the snapshot
    // to the image ref property. otherwise if full clone is being used we need to select
    // just the template vm's name
    if(linkedCloneConfiguration == true)
    {
        var imageRef = newTemplateName + "/" + snapshotName;
    }
    else
    {
        var imageRef = newTemplateName;
    }
    // update the image reference to the newly cloned VM
    blueprintJsonObject["resources"][componentName]["properties"]["imageRef"] = imageRef;

    // delete image setting if present on the object as we are using imageRef due to use of linked clones
    // and image cannot be used together with imageRef on the same resource in a blueprint
    delete blueprintJsonObject["resources"][componentName]["properties"]["image"];
}

// update blueprint common values
blueprintJsonObject.name = newBlueprintName;
blueprintJsonObject.version = "1.0.0";
blueprintJsonObject.formatVersion = 1;

// convert the JSON object back to a string
newBlueprintJson = JSON.stringify(blueprintJsonObject);

System.log("New Blueprint JSON has been prepared");
System.log("Converting the new Blueprint JSON to YAML in order to import to VRA")</script>
        <in-binding>
            <bind name="blueprintJson" type="string" export-name="blueprintJson"/>
            <bind name="snapshotName" type="string" export-name="snapshotName"/>
            <bind name="deploymentResourcesData" type="Array/Properties" export-name="deploymentResourcesData"/>
            <bind name="newBlueprintName" type="string" export-name="newVersion"/>
            <bind name="linkedCloneConfiguration" type="boolean" export-name="linkedCloneConfiguration"/>
        </in-binding>
        <out-binding>
            <bind name="newBlueprintJson" type="string" export-name="newBlueprintJson"/>
        </out-binding>
        <position y="220.0" x="660.0"/>
    </workflow-item>
    <workflow-item name="item10" out-name="item11" type="task" script-module="com.terasky.utils/getVraAccessToken" comparator="0">
        <display-name>Get VRA Access Token</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").getVraAccessToken(username,password,restHost);
</script>
        <in-binding>
            <bind name="username" type="string" export-name="username"/>
            <bind name="password" type="SecureString" export-name="password"/>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="string" export-name="accessToken"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="20.0" x="140.0"/>
    </workflow-item>
    <workflow-item name="item11" out-name="item2" type="task" script-module="com.terasky.utils/getDeploymentIdByName" comparator="0">
        <display-name>Get Dep ID</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").getDeploymentIdByName(accessToken,restHost,deploymentName);
</script>
        <in-binding>
            <bind name="accessToken" type="string" export-name="accessToken"/>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="deploymentName" type="string" export-name="existingDeploymentName"/>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="string" export-name="deploymentID"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="20.0" x="270.0"/>
    </workflow-item>
    <workflow-item name="item12" out-name="item17" type="task" script-module="com.terasky.utils/yaml2json_py" comparator="0">
        <display-name>Convert YAML To JSON</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").yaml2json_py(yamlTxt);
</script>
        <in-binding>
            <bind name="yamlTxt" type="Text" export-name="blueprintYaml"/>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="string" export-name="blueprintJson"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="20.0" x="660.0"/>
    </workflow-item>
    <workflow-item name="item15" out-name="item9" type="link" linked-workflow-id="76cfd0e2-2422-49de-bc5a-5a7d1a8592a2" comparator="0">
        <display-name>Clone and Snapshot All VMs</display-name>
        <in-binding>
            <bind name="vmFolder" type="VC:VmFolder" export-name="vmFolder">
                <description>VM Folder object in which to place the cloned VMs for the new blueprint</description>
            </bind>
            <bind name="allVmProperties" type="Array/Properties" export-name="deploymentResourcesData">
                <description>array of all the VMs properties needed for the cloning process</description>
            </bind>
            <bind name="snapshotName" type="string" export-name="snapshotName">
                <description>snapshot name to create on the newly cloned VMs for linked clone purposes</description>
            </bind>
            <bind name="NsxtConfiguration" type="boolean" export-name="NsxtConfiguration"/>
            <bind name="linkedCloneConfiguration" type="boolean" export-name="linkedCloneConfiguration"/>
        </in-binding>
        <out-binding/>
        <description> </description>
        <position y="158.42105263157896" x="655.7894736842105"/>
    </workflow-item>
    <workflow-item name="item16" out-name="item8" type="task" script-module="com.terasky.utils/json2yaml_py" comparator="0">
        <display-name>Convert JSON To YAML</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").json2yaml_py(jsonTxt);
</script>
        <in-binding>
            <bind name="jsonTxt" type="string" export-name="newBlueprintJson"/>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="Text" export-name="newBlueprintYaml"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="282.07692307692304" x="658.4615384615385"/>
    </workflow-item>
    <workflow-item name="item17" out-name="item15" type="task" comparator="0">
        <display-name>Create VM Folder for Blueprint VMs</display-name>
        <script encoded="false">System.log("Source Blueprint YAML has been converted to JSON");
System.log("Creating the vCenter VM Folder for the new blueprint versions templates");

// find the folder of the relevant blueprint
var folders = VcPlugin.getAllVmFolders(null,blueprintName);
for each(var folder in folders)
{
    // validate an exac match was returned
    if(folder.name == blueprintName)
    {
        parentVmFolder = folder;
        break;
    }
}

// if no blueprint folder exists it will be created
if(parentVmFolder == null)
{
    parentVmFolder = blueprintBaseFolder.createFolder(blueprintName);
}

// creating the folder for the to be cloned VMs. Each blueprint version will have its own folder
vmFolder = parentVmFolder.createFolder(newVersion);

System.log("The Blueprint Templates VM Folder has been created");
System.log("Moving on to cloning the source deployments VMs and prepairing them as linked clone templates");</script>
        <in-binding>
            <bind name="parentVmFolder" type="VC:VmFolder" export-name="parentVmFolder"/>
            <bind name="newVersion" type="string" export-name="newVersion"/>
            <bind name="blueprintName" type="string" export-name="blueprintName"/>
            <bind name="blueprintBaseFolder" type="VC:VmFolder" export-name="blueprintBaseFolder"/>
        </in-binding>
        <out-binding>
            <bind name="vmFolder" type="VC:VmFolder" export-name="vmFolder"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="82.3076923076923" x="659.6923076923076"/>
    </workflow-item>
    <workflow-item name="item18" out-name="item19" type="task" comparator="0">
        <display-name>Create BP Version</display-name>
        <script encoded="false">System.log("Creating a blueprint version and releasing it to the catalog");

// prepare variables for body of request
var changelog = "Created Via Save To Catalog Automation";
try
{
    var user = System.getContext().getParameter("__metadata_userName");
}
catch(e)
{
    System.warn("Could not get username from context. if run directly from VRO you can ignore this warning");
    var user = "undefined";
}
var description = "Created via Save To Catalog Automation. Based off of the deployment with the name: " + existingDeploymentName + " by the user: " + user;
var release = true;

// create version of blueprint
var uri = "/blueprint/api/blueprints/" + blueprintID + "/versions";
var method = "POST";
var body = '{"changeLog":"' + changelog + '","description":"' + description + '","release":' + release + ',"version":"' + newVersion + '"}';
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    System.warn("CONTNET: " + response.contentAsString);
    System.warn("STATUS CODE: " + response.statusCode);
    System.warn("HEADERS:");
    for each(var header in response.getAllHeaders().keys)
    {
        System.warn("    Header: " + header);
        System.warn("    Value:" + response.getAllHeaders().get(header));
    }
    throw "error creating the new blueprint version. status code " + response.statusCode;
}

System.log("The New Blueprint version has been created and released");</script>
        <in-binding>
            <bind name="accessToken" type="string" export-name="accessToken"/>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="existingDeploymentName" type="string" export-name="existingDeploymentName"/>
            <bind name="blueprintID" type="string" export-name="blueprintID"/>
            <bind name="newVersion" type="string" export-name="newVersion"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="282.3076923076923" x="378.7692307692308"/>
    </workflow-item>
    <workflow-item name="item19" out-name="item22" type="task" comparator="0">
        <display-name>Publish BP In SB</display-name>
        <script encoded="false">System.log("Updating the Service Broker Catalog Source for the new Blueprint to be available");

// get all catalog sources the relevant project has access to
var uri = "/catalog/api/admin/sources?projectId=" + projectId + "&amp;size=2000";
var method = "GET";
var body = '{}';
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    throw "error getting the catalog sources for the relevant project. status code " + response.statusCode;
}

var jsonBody = JSON.parse(response.contentAsString);

// travers the results and find the relevant catalog source id from the
// blueprint catalog source of the relevant project
for each(var catSource in jsonBody.content)
{
    if(catSource.typeId == "com.vmw.blueprint")
    {
        // needs to be split from previous if because the projectId value
        // does not exist on all catalog source types and will cause errors
        if(catSource.projectId == projectId)
        {
            var catSourceId = catSource.id;
            break;
        }
    }
}

// make sure a catalog source was found for blueprints and the relevant project
if(catSourceId == null)
{
    throw "No Catalog Source exists for Blueprints in the relevant project";
}

// get the relevant catalog source JSON via API
var uri = "/catalog/api/admin/sources/" + catSourceId;
var method = "GET";
var body = '{}';
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    throw "error getting the JSON body of the relevant catalog source. status code " + response.statusCode;
}

// get body of response from GET call which is the body for our next POST call
var body = response.contentAsString;

// ReSync The Catalog source via API to update Service Broker with the new Blueprint
var uri = "/catalog/api/admin/sources/";
var method = "POST";
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    System.warn("CONTNET: " + response.contentAsString);
    System.warn("STATUS CODE: " + response.statusCode);
    System.warn("HEADERS:");
    for each(var header in response.getAllHeaders().keys)
    {
        System.warn("    Header: " + header);
        System.warn("    Value:" + response.getAllHeaders().get(header));
    }
    throw "error re-syncing the relevant catalllog source. status code " + response.statusCode;
}

System.log("Save To Catalog Automation Completed!");</script>
        <in-binding>
            <bind name="projectId" type="string" export-name="sourceProjectID"/>
            <bind name="accessToken" type="string" export-name="accessToken"/>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="282.3076923076923" x="253.69230769230768"/>
    </workflow-item>
    <workflow-item name="item20" throw-bind-name="errorMessage" type="end" end-mode="1" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="149.23076923076923" x="503.0769230769231"/>
    </workflow-item>
    <workflow-item name="item21" out-name="item20" type="task" comparator="0">
        <display-name>Default Error Message</display-name>
        <script encoded="false">System.error("The Workflow has caught an error. please find bellow the error.");
System.error("ERROR: " + errorMessage);
System.error("for any assistance needed please contact your cloud automation team for further investigation of the issue")</script>
        <in-binding>
            <bind name="errorMessage" type="string" export-name="errorMessage"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="159.23076923076923" x="333.0769230769233"/>
    </workflow-item>
    <workflow-item name="item22" out-name="item4" type="task" comparator="0">
        <display-name>Run Image Data Collection</display-name>
        <script encoded="false">System.log("Running Image Data Collection on the relevant cloud account in order to sync the newly cloned VMs");

// Running image enumeration (data collection) on the relevant cloud account
var uri = "/iaas/api/cloud-accounts-vsphere/" + cloudAccountID + "/private-image-enumeration";
var method = "POST";
var body = '{}';
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// validate the status code was within the 200 range
if(response.statusCode.toString().charAt(0) != "2")
{
    System.warn("CONTNET: " + response.contentAsString);
    System.warn("STATUS CODE: " + response.statusCode);
    System.warn("HEADERS:");
    for each(var header in response.getAllHeaders().keys)
    {
        System.warn("    Header: " + header);
        System.warn("    Value:" + response.getAllHeaders().get(header));
    }
    throw "error submitting the new blueprint. status code " + response.statusCode;
}

System.debug("Data collection has been kicked off. now polling till complete")

// polling data collection status
var jsonBody = JSON.parse(response.contentAsString);
var uri = jsonBody.selfLink;
var method = "GET";
var body = '{}';
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var status = "INPROGRESS";

// poll the status every 5 seconds
while(status == "INPROGRESS")
{
    System.sleep(5000);
    var response = request.execute();
    var jsonBody = JSON.parse(response.contentAsString);
    status = jsonBody.status;
    System.debug("Data collection status: " + status);
}

// validate the data collection didnt error out
if(status != "FINISHED")
{
    System.error("Data collection for the relevant cloud account failed.");
}
else
{
    System.log("Data collection has completed. The blueprint is now ready for consumption");
}</script>
        <in-binding>
            <bind name="accessToken" type="string" export-name="accessToken"/>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="cloudAccountID" type="string" export-name="cloudAccountID"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="282.3076923076923" x="128.6153846153846"/>
    </workflow-item>
    <presentation>
        <p-param name="prefix">
            <desc>prefix</desc>
        </p-param>
    </presentation>
    <workflow-note x="289.0" y="82.0" w="402.0" h="23.5" color="FFFFC0">
        <description>change to find folder by blueprint name and create sub folder for version</description>
    </workflow-note>
</ns2:workflow>
