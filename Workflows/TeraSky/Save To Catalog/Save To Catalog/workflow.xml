<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:workflow xmlns:ns2="http://vmware.com/vco/workflow" root-name="item10" object-name="workflow:name=generic" id="4303308a-26e0-4901-9174-e3ccfbf7d79b" editor-version="2.0" version="1.1.0" api-version="6.0.0" allowed-operations="vef" restartMode="1" resumeFromFailedMode="0">
    <display-name>Save To Catalog</display-name>
    <description>This automation works for VRA versions 8.1 and above.</description>
    <position y="30.0" x="60.0"/>
    <input>
        <param name="prefix" type="string">
            <description>the vm name prefix for building the new cloned VMs (templates) names</description>
        </param>
        <param name="existingDeploymentName" type="string">
            <description>The deployment Name that this automation will clone and turn into a blueprint ready for consumption</description>
        </param>
        <param name="newBlueprintName" type="string">
            <description>The Unique name of the new blueprint the automation will create</description>
        </param>
        <param name="newBlueprintDescription" type="string">
            <description>The description to be added to the new Blueprint when created</description>
        </param>
    </input>
    <output/>
    <attrib name="accessToken" type="string">
        <value encoded="n"></value>
        <description>VRA Bearer Token used in all needed API calls against the VRA API</description>
    </attrib>
    <attrib name="restHost" type="REST:RESTHost" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="vraRestHost">
        <description>the VRA Rest API Host object</description>
    </attrib>
    <attrib name="username" type="string" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="username">
        <description>the username of the VRA admin user</description>
    </attrib>
    <attrib name="password" type="SecureString" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="password">
        <description>the password of the VRA admin user</description>
    </attrib>
    <attrib name="deploymentID" type="string">
        <value encoded="n"></value>
        <description>the ID of the deployment being saved as a blueprint</description>
    </attrib>
    <attrib name="blueprintID" type="string">
        <value encoded="n"></value>
        <description>the blueprint ID the deployment was provisioned from</description>
    </attrib>
    <attrib name="blueprintVersion" type="string">
        <value encoded="n"></value>
        <description>the blueprint version the deployment was provisioned from</description>
    </attrib>
    <attrib name="blueprintYaml" type="Text">
        <value encoded="n"></value>
        <description>the source blueprints YAML</description>
    </attrib>
    <attrib name="blueprintJson" type="string">
        <value encoded="n"></value>
        <description>source blueprints JSON representation</description>
    </attrib>
    <attrib name="deploymentResourcesData" type="Array/Properties">
        <value encoded="n">[]</value>
        <description>used for storing the relevant data for cloned vms and here placement in the blueprints</description>
    </attrib>
    <attrib name="vmFolder" type="VC:VmFolder">
        <value encoded="n"/>
        <description>The VM Folder object created for the blueprint during the automation</description>
    </attrib>
    <attrib name="newBlueprintYaml" type="Text">
        <value encoded="n"></value>
        <description>the YAML of the new blueprint</description>
    </attrib>
    <attrib name="newBlueprintJson" type="string">
        <value encoded="n"></value>
        <description>the JSON representation of the new blueprint</description>
    </attrib>
    <attrib name="snapshotName" type="string">
        <value encoded="n">ss_for_vra_blueprint</value>
        <description>name of snashot for all new cloned vms to be used in vra blueprint to provision linked clones</description>
    </attrib>
    <attrib name="projectId" type="string">
        <value encoded="n"></value>
        <description>the ID of the project the deployment exists under and that the new blueprint will be created in its context</description>
    </attrib>
    <attrib name="parentVmFolder" type="VC:VmFolder" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="parentVmFolder">
        <description>the folder under which each blueprint will have a folder with its templates</description>
    </attrib>
    <attrib name="newBlueprintID" type="string">
        <value encoded="n"></value>
        <description>the received ID of the new blueprint after it has been created</description>
    </attrib>
    <workflow-item name="item2" out-name="item0" type="task" comparator="0">
        <display-name>Get Deployment Data</display-name>
        <script encoded="false">System.log("Retrieving Data from the source deployment")

// prepare variables
deploymentResourcesData = [];
var count = 1;

// get deployment source Data
var uri = "/deployment/api/deployments/" + deploymentID;
var method = "GET";
var body = "{}";
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();
var strResponseBody = response.contentAsString;
var jsonResponseBody = JSON.parse(strResponseBody);

// set source blueprint and project data output variables
blueprintVersion = jsonResponseBody.blueprintVersion;
blueprintID = jsonResponseBody.blueprintId;
projectId = jsonResponseBody.projectId;

// get deployment resources from deployment ID
var uri = "/deployment/api/deployments/" + deploymentID + "/resources";
var method = "GET";
var body = "{}";
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();
var strResponseBody = response.contentAsString;
var jsonResponseBody = JSON.parse(strResponseBody);

// traverse array of resource to find the vSphere VM components
for each (var resource in jsonResponseBody.content)
{
	if(resource.type == "Cloud.vSphere.Machine")
	{
		// build properties object to hold data to correlate the new VM, source VM and
        // resource data in order to clone the VMs and create the blueprint accordingly
        var vmData = new Properties();
        vmData.put("name",resource.name);
        vmData.put("type",resource.type);
        vmData.put("template",resource.properties.imageRef);
        vmData.put("vmName",resource.properties.resourceName);
        vmData.put("vmUuid",resource.properties.instanceUUID);
        
        // make sure the new VM name is unique as VRA requires names to be unique within
        // a cloud account (vCenter) for it to be used as a template
        var nameOk = false;
        while(nameOK == false)
        {
            System.debug("Checking if the name " + prefix + "-" + count + " is available");
            nameOK = checkNameAvailability(prefix,count);
            System.debug("availability of the name is: " + nameOK);
            
            // if the name is not available raise the count variable and keep trying
            if(nameOK == false)
            {
                count++;
            }
        }
        vmData.put("tempName",prefix + "-" + count);
        
        // add the properties object to the output array with the data on all VMs relevant
        deploymentResourcesData.push(vmData);
		count++;
	}
}

System.log("All relevant data has been retrieved from the source deployment.")

// a function to check if a name is unique within all connected vCenters
function checkNameAvailability(prefix, number) {
  var tempName = prefix + "-" + number;
  
  // this is the quickest way as xpath query has not been optimized since VRO 7.1
  var vms = VcPlugin.getAllVirtualMachines(null, tempName);
  if(vms.length == 0)
  {
      return true;
  }  
  else
  {
      for each(vm in vms)
      {
          if(vm.name == tempName)
          {
              return false;
          }
      }
      return true;
  }
}</script>
        <in-binding>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="prefix" type="string" export-name="prefix"/>
            <bind name="accessToken" type="string" export-name="accessToken"/>
            <bind name="deploymentID" type="string" export-name="deploymentID"/>
        </in-binding>
        <out-binding>
            <bind name="blueprintID" type="string" export-name="blueprintID"/>
            <bind name="blueprintVersion" type="string" export-name="blueprintVersion"/>
            <bind name="projectId" type="string" export-name="projectId"/>
            <bind name="deploymentResourcesData" type="Array/Properties" export-name="deploymentResourcesData"/>
        </out-binding>
        <position y="40.0" x="410.0"/>
    </workflow-item>
    <workflow-item name="item4" type="end" end-mode="0" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="160.0" x="800.0"/>
    </workflow-item>
    <workflow-item name="item0" out-name="item12" type="task" comparator="0">
        <display-name>Get Blueprint YAML</display-name>
        <script encoded="false">System.log("Retrieving the Source Blueprint")

// retrieving the blueprint and its relevant version 
// that the source deployment was provisioned from
var uri = "/blueprint/api/blueprints/" + blueprintID + "/versions/" + blueprintVersion;
var method = "GET";
var body = "{}";
uri = encodeURI(uri)
var request = restHost.createRequest(method , uri , body)
request.setHeader("Authorization" , "Bearer " + accessToken)
request.setHeader("Content-Type" , "application/json")
var response = request.execute()
var jsonResponseBody = JSON.parse(response.contentAsString);

// the API response is a JSON with an embedded YAML of the blueprint which is escaped.
// in order to be able to convert the YAML to JSON we must un-escape the YAML
yamlString = jsonResponseBody.content;
blueprintYaml = System.getModule("com.terasky.utils").replaceBackslashNWithNewLine(yamlString);

System.log("The Source Blueprint YAML has been retrieved and formatted")
System.log("Converting the blueprint YAML now to JSON to enable data manipulation")</script>
        <in-binding>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="blueprintID" type="string" export-name="blueprintID"/>
            <bind name="blueprintVersion" type="string" export-name="blueprintVersion"/>
            <bind name="accessToken" type="string" export-name="accessToken"/>
        </in-binding>
        <out-binding>
            <bind name="blueprintYaml" type="Text" export-name="blueprintYaml"/>
        </out-binding>
        <position y="40.0" x="540.0"/>
    </workflow-item>
    <workflow-item name="item8" out-name="item18" type="task" comparator="0">
        <display-name>Create new blueprint</display-name>
        <script encoded="false">System.log("New Blueprint JSON has been converted to YAML");
System.log("Creating the new blueprint now in the VRA");

// escaping the YAML so that it can be sent in the POST body JSON to VRA
var blueprintContent = System.getModule("com.terasky.utils").replaceNewLineWithBackslashN(newBlueprintYaml);

// Creating the new blueprint in the VRA
var uri = "/blueprint/api/blueprints";
var method = "POST";
var body = '{"name":"' + newBlueprintName + '","description":"' + newBlueprintDescription + '","content":' + blueprintContent + ',"projectId":"' + projectId + '","requestScopeOrg":"true"}';
var request = restHost.createRequest(method , uri , body);
request.setHeader("Authorization" , "Bearer " + accessToken);
request.setHeader("Content-Type" , "application/json");
var response = request.execute();

// retrieving the new Blueprint ID for further system updates and tasks
var jsonBody = JSON.parse(response.contentAsString);
newBlueprintID = jsonBody.id;

System.log("The New Blueprint has been created");</script>
        <in-binding>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="projectId" type="string" export-name="projectId"/>
            <bind name="newBlueprintName" type="string" export-name="newBlueprintName"/>
            <bind name="newBlueprintDescription" type="string" export-name="newBlueprintDescription"/>
            <bind name="newBlueprintYaml" type="Text" export-name="newBlueprintYaml"/>
            <bind name="accessToken" type="string" export-name="accessToken"/>
        </in-binding>
        <out-binding>
            <bind name="newBlueprintID" type="string" export-name="newBlueprintID"/>
        </out-binding>
        <position y="170.0" x="280.0"/>
    </workflow-item>
    <workflow-item name="item9" out-name="item16" type="task" comparator="0">
        <display-name>Update Blueprint JSON</display-name>
        <script encoded="false">System.log("Cloning and preparing the VMs is complete");
System.log("Updating the source blueprints JSON with the new VMs references");

// convert the JSON string to an object for easy manipulation
var blueprintJsonObject = JSON.parse(blueprintJson);

// traverse the array of properties created at the start of the workflow with VM details
for each(var component in deploymentResourcesData)
{
    var componentName = component.get("name");
    var newTemplateName = component.get("tempName");
    var imageRef = newTemplateName + "/" + snapshotName;
    
    // update the image reference to the newly cloned VM
    blueprintJsonObject["resources"][componentName]["properties"]["imageRef"] = imageRef;
}

// update blueprint common values
blueprintJsonObject.name = newBlueprintName;
blueprintJsonObject.version = "1.0.0";
blueprintJsonObject.formatVersion = "1";

// convert the JSON object back to a string
newBlueprintJson = JSON.stringify(blueprintJsonObject);

System.log("New Blueprint JSON has been prepared");
System.log("Converting the new Blueprint JSON to YAML in order to import to VRA")</script>
        <in-binding>
            <bind name="blueprintJson" type="string" export-name="blueprintJson"/>
            <bind name="snapshotName" type="string" export-name="snapshotName"/>
            <bind name="deploymentResourcesData" type="Array/Properties" export-name="deploymentResourcesData"/>
            <bind name="newBlueprintName" type="string" export-name="newBlueprintName"/>
        </in-binding>
        <out-binding>
            <bind name="newBlueprintJson" type="string" export-name="newBlueprintJson"/>
        </out-binding>
        <position y="99.5" x="132.0"/>
    </workflow-item>
    <workflow-item name="item10" out-name="item11" type="task" script-module="com.terasky.utils/getVraAccessToken" comparator="0">
        <display-name>Get VRA Access Token</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").getVraAccessToken(username,password,restHost);
</script>
        <in-binding>
            <bind name="username" type="string" export-name="username">
                <description></description>
            </bind>
            <bind name="password" type="SecureString" export-name="password">
                <description></description>
            </bind>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost">
                <description></description>
            </bind>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="string" export-name="accessToken"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="40.0" x="150.0"/>
    </workflow-item>
    <workflow-item name="item11" out-name="item2" type="task" script-module="com.terasky.utils/getDeploymentIdByName" comparator="0">
        <display-name>Get Deployment ID By Name</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").getDeploymentIdByName(accessToken,restHost,deploymentName);
</script>
        <in-binding>
            <bind name="accessToken" type="string" export-name="accessToken">
                <description></description>
            </bind>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost">
                <description></description>
            </bind>
            <bind name="deploymentName" type="string" export-name="existingDeploymentName">
                <description></description>
            </bind>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="string" export-name="deploymentID"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="40.0" x="280.0"/>
    </workflow-item>
    <workflow-item name="item12" out-name="item17" type="task" script-module="com.terasky.utils/yaml2json_py" comparator="0">
        <display-name>Convert YAML To JSON</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").yaml2json_py(yamlTxt);
</script>
        <in-binding>
            <bind name="yamlTxt" type="Text" export-name="blueprintYaml">
                <description></description>
            </bind>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="string" export-name="blueprintJson"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="100.0" x="540.0"/>
    </workflow-item>
    <workflow-item name="item15" out-name="item9" type="link" linked-workflow-id="76cfd0e2-2422-49de-bc5a-5a7d1a8592a2" comparator="0">
        <display-name>Clone and Snapshot All VMs</display-name>
        <script encoded="false"></script>
        <in-binding>
            <bind name="vmFolder" type="VC:VmFolder" export-name="vmFolder"/>
            <bind name="allVmProperties" type="Array/Properties" export-name="deploymentResourcesData"/>
            <bind name="snapshotName" type="string" export-name="snapshotName"/>
        </in-binding>
        <out-binding/>
        <description> </description>
        <position y="100.0" x="280.0"/>
    </workflow-item>
    <workflow-item name="item16" out-name="item8" type="task" script-module="com.terasky.utils/json2yaml_py" comparator="0">
        <display-name>Convert JSON To YAML</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").json2yaml_py(jsonTxt);
</script>
        <in-binding>
            <bind name="jsonTxt" type="string" export-name="newBlueprintJson">
                <description></description>
            </bind>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="Text" export-name="newBlueprintYaml"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="170.0" x="134.0"/>
    </workflow-item>
    <workflow-item name="item17" out-name="item15" type="task" comparator="0">
        <display-name>Create VM Folder for Blueprint VMs</display-name>
        <script encoded="false">System.log("Source Blueprint YAML has been converted to JSON")&#13;
System.log("Creating the vCenter VM Folder for the new blueprints templates")&#13;
&#13;
// creating the folder for the to be cloned VMs. Each blueprint will have its own folder&#13;
vmFolder = parentVmFolder.createFolder(newBlueprintName)&#13;
&#13;
System.log("The Blueprint Templates VM Folder has been created")&#13;
System.log("Moving on to cloning the source deployments VMs and prepairing them as linked clone templates")</script>
        <in-binding>
            <bind name="parentVmFolder" type="VC:VmFolder" export-name="parentVmFolder"/>
            <bind name="newBlueprintName" type="string" export-name="newBlueprintName"/>
        </in-binding>
        <out-binding>
            <bind name="vmFolder" type="VC:VmFolder" export-name="vmFolder"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="100.0" x="410.0"/>
    </workflow-item>
    <workflow-item name="item18" out-name="item19" type="task" comparator="0">
        <display-name>Create And Release Blueprint Version</display-name>
        <script encoded="false">System.log("Creating a blueprint version and releasing it to the catalog");&#13;
&#13;
// prepare variables for body of request&#13;
var changelog = "Created Via Save To Catalog Automation";&#13;
var user = System.getContext().getParameter("__metadata_userName");&#13;
var description = "Created via Save To Catalog Automation. Based off of the deployment with the name: " + existingDeploymentName + " by the user: " + user;&#13;
var version = "1.0.0";&#13;
var release = true;&#13;
&#13;
// create version of blueprint&#13;
var uri = "/blueprint/api/blueprints/" + newBlueprintID + "/versions";&#13;
var method = "POST";&#13;
var body = '{"changeLog":"' + changelog + '","description":"' + description + '","release":' + release + ',"version":"' + version + '"}';&#13;
var request = restHost.createRequest(method , uri , body);&#13;
request.setHeader("Authorization" , "Bearer " + accessToken);&#13;
request.setHeader("Content-Type" , "application/json");&#13;
var response = request.execute();&#13;
&#13;
System.log("The New Blueprint version has been created and released");</script>
        <in-binding>
            <bind name="accessToken" type="string" export-name="accessToken"/>
            <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
            <bind name="newBlueprintID" type="string" export-name="newBlueprintID"/>
            <bind name="existingDeploymentName" type="string" export-name="existingDeploymentName"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="170.0" x="420.0"/>
    </workflow-item>
    <workflow-item name="item19" out-name="item4" type="task" comparator="0">
        <display-name>Publish Blueprint In Service Broker</display-name>
        <script encoded="false">System.log("Updating the Service Broker Catalog Source for the new Blueprint to be available");&#13;
&#13;
// get all catalog sources the relevant project has access to&#13;
var uri = "/catalog/api/admin/sources?projectId=" + projectId + "&amp;size=2000";&#13;
var method = "GET";&#13;
var body = '{}';&#13;
var request = restHost.createRequest(method , uri , body);&#13;
request.setHeader("Authorization" , "Bearer " + accessToken);&#13;
request.setHeader("Content-Type" , "application/json");&#13;
var response = request.execute();&#13;
var jsonBody = JSON.parse(response.contentAsString);&#13;
&#13;
// travers the results and find the relevant catalog source id from the&#13;
// blueprint catalog source of the relevant project&#13;
for each(var catSource in jsonBody.content)&#13;
{&#13;
    if(catSource.typeId == "com.vmw.blueprint")&#13;
    {&#13;
        // needs to be split from previous if because the projectId value&#13;
        // does not exist on all catalog source types and will cause errors&#13;
        if(catSource.projectId == projectId)&#13;
        {&#13;
            var catSourceId = catSource.id;&#13;
            break;&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
// make sure a catalog source was found for blueprints and the relevant project&#13;
if(catSourceId == null)&#13;
{&#13;
    throw "No Catalog Source exists for Blueprints in the relevant project";&#13;
}&#13;
&#13;
// get the relevant catalog source JSON via API&#13;
var uri = "/catalog/api/admin/sources/" + catSourceId;&#13;
var method = "GET";&#13;
var body = '{}';&#13;
var request = restHost.createRequest(method , uri , body);&#13;
request.setHeader("Authorization" , "Bearer " + accessToken);&#13;
request.setHeader("Content-Type" , "application/json");&#13;
var response = request.execute();&#13;
&#13;
// get body of response from GET call which is the body for our next POST call&#13;
var body = response.contentAsString;&#13;
&#13;
// ReSync The Catalog source via API to update Service Broker with the new Blueprint&#13;
var uri = "/catalog/api/admin/sources/";&#13;
var method = "POST";&#13;
var request = restHost.createRequest(method , uri , body);&#13;
request.setHeader("Authorization" , "Bearer " + accessToken);&#13;
request.setHeader("Content-Type" , "application/json");&#13;
var response = request.execute();&#13;
&#13;
System.log("Save To Catalog Automation Completed!");</script>
        <in-binding>
            <bind name="projectId" type="string" export-name="projectId"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="170.0" x="560.0"/>
    </workflow-item>
    <presentation>
        <p-param name="prefix">
            <desc>prefix</desc>
        </p-param>
    </presentation>
    <workflow-note x="8.0" y="77.5" w="136.0" h="46.0" color="FFFFC0">
        <description>----- add error handling
----- debug and test</description>
    </workflow-note>
</ns2:workflow>
